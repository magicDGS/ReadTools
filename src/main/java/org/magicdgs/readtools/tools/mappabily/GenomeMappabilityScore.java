/*
 * The MIT License (MIT)
 *
 * Copyright (c) 2017 Daniel Gomez-Sanchez
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

package org.magicdgs.readtools.tools.mappabily;

import org.magicdgs.readtools.cmd.argumentcollections.BwaMemArgumentCollection;
import org.magicdgs.readtools.cmd.argumentcollections.RTOutputBamArgumentCollection;
import org.magicdgs.readtools.engine.ReadToolsProgram;
import org.magicdgs.readtools.utils.bwa.BwaUtils;

import htsjdk.samtools.SAMFileHeader;
import htsjdk.samtools.SAMFlag;
import htsjdk.samtools.SAMRecord;
import htsjdk.samtools.SAMSequenceDictionary;
import htsjdk.samtools.SAMSequenceRecord;
import htsjdk.samtools.SamReader;
import htsjdk.samtools.util.CloserUtil;
import org.broadinstitute.barclay.argparser.Argument;
import org.broadinstitute.barclay.argparser.ArgumentCollection;
import org.broadinstitute.barclay.argparser.BetaFeature;
import org.broadinstitute.barclay.argparser.CommandLineProgramProperties;
import org.broadinstitute.hellbender.cmdline.StandardArgumentDefinitions;
import org.broadinstitute.hellbender.cmdline.argumentcollections.IntervalArgumentCollection;
import org.broadinstitute.hellbender.cmdline.argumentcollections.OptionalIntervalArgumentCollection;
import org.broadinstitute.hellbender.cmdline.argumentcollections.ReferenceInputArgumentCollection;
import org.broadinstitute.hellbender.cmdline.argumentcollections.RequiredReferenceInputArgumentCollection;
import org.broadinstitute.hellbender.cmdline.programgroups.FastaProgramGroup;
import org.broadinstitute.hellbender.engine.ProgressMeter;
import org.broadinstitute.hellbender.engine.ReadsDataSource;
import org.broadinstitute.hellbender.engine.ReferenceContext;
import org.broadinstitute.hellbender.engine.ReferenceDataSource;
import org.broadinstitute.hellbender.engine.Shard;
import org.broadinstitute.hellbender.engine.ShardBoundary;
import org.broadinstitute.hellbender.exceptions.GATKException;
import org.broadinstitute.hellbender.exceptions.UserException;
import org.broadinstitute.hellbender.utils.IntervalUtils;
import org.broadinstitute.hellbender.utils.SimpleInterval;
import org.broadinstitute.hellbender.utils.Utils;
import org.broadinstitute.hellbender.utils.bwa.BwaMemAligner;
import org.broadinstitute.hellbender.utils.bwa.BwaMemAlignment;
import org.broadinstitute.hellbender.utils.bwa.BwaMemAlignmentUtils;
import org.broadinstitute.hellbender.utils.bwa.BwaMemIndex;
import org.broadinstitute.hellbender.utils.io.IOUtils;
import org.broadinstitute.hellbender.utils.read.GATKRead;
import org.broadinstitute.hellbender.utils.read.GATKReadWriter;
import org.broadinstitute.hellbender.utils.read.SAMRecordToGATKReadAdapter;

import java.io.File;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;
import java.util.stream.Collectors;

/**
 * @author Daniel Gomez-Sanchez (magicDGS)
 */
// TODO: explain origin of the algorithm
// TODO: based on the GMSA method https://academic.oup.com/bioinformatics/article-lookup/doi/10.1093/bioinformatics/bts330
// TODO: but using k-mers without errors
// TODO: this is similar to a pileup-mappability, and using the average mapping scores
@BetaFeature
@CommandLineProgramProperties(oneLineSummary = "",
        summary = "",
        programGroup = FastaProgramGroup.class)
public final class GenomeMappabilityScore extends ReadToolsProgram {

    // TODO: change documentation
    @Argument(fullName = StandardArgumentDefinitions.INPUT_LONG_NAME, shortName = StandardArgumentDefinitions.INPUT_SHORT_NAME, doc = "Input SAM/BAM/CRAM file generated by MapReferenceKmers")
    public String inputPath;

    // TODO: enable intervals for traversal?
    // @ArgumentCollection
    // public IntervalArgumentCollection intervalArgs = new OptionalIntervalArgumentCollection();


    private ReadsDataSource reads;

    @Override
    protected void onStartup() {
        reads = new ReadsDataSource(IOUtils.getPath(inputPath));
    }


    @Override
    protected Object doWork() {
        final SAMSequenceDictionary dictionary = reads.getHeader().getSequenceDictionary();

        // get the senquence names
        final List<String> seqNames = dictionary.getSequences().stream()
                .map(SAMSequenceRecord::getSequenceName).collect(Collectors.toList());

        final ProgressMeter progressMeter = new ProgressMeter();
        progressMeter.setRecordLabel("reads");
        progressMeter.start();

        // iterate over each interval
        Utils.stream(reads.iterator())
                // map the interval from the reference, returning just primary alignment
                .map(read -> {
                    // TODO: maybe we should use a different tag
                    final SimpleInterval originalAlignment = getOriginalAlignmentInterval(read);
                    // TODO: grab the MAPQ somehow as in GMSA
                    // if it is unmapped or does not overlap with the real position
                    if (read.isUnmapped() || !originalAlignment.overlaps(read)) {
                        // TODO: here I guess that the GMSA will assing a MAPQ of zero
                    } else {
                        // TODO: here I guess that the GMSA will grab the MAPQ for all the interval
                        // TODO: but the correct one is assing the MAPQ to the aligned positions
                        // TODO: and what should we do if there are indels? that shifts the positions...
                    }
                    return read;
                })
                // TODO: do something else?
                .forEach(progressMeter::update);

        progressMeter.stop();

        return null;
    }

    private static SimpleInterval getOriginalAlignmentInterval(final GATKRead read) {
        final String oa = read.getAttributeAsString("OA");
        if (oa == null || oa.isEmpty()) {
            // TODO: better error message
            throw new UserException("The input file should have the OA tag always included");
        }
        final String[] originalAlignments = oa.split(";");
        if (originalAlignments.length != 1) {
            // TODO: better error message
            throw new UserException("The input file should have only one original alingment in the OA tag");
        }
        // OA:Z:(rname,pos,strand,CIGAR,mapQ,NM;)+
        final String[] components = originalAlignments[0].split(",");

        return null;
    }

    @Override
    protected void onShutdown() {
        CloserUtil.close(reads);
    }
}
